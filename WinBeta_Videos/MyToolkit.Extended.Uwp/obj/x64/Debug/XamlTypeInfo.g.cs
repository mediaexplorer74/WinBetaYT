//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks","14.0.0.0")]
    public sealed class XamlMetaDataProvider: global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[78];
            _typeNameTable[0] = "MyToolkit.Converters.NotConverter";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "MyToolkit.Converters.VisibilityConverter";
            _typeNameTable[3] = "MyToolkit.Converters.LongListSelectorBackgroundConverter";
            _typeNameTable[4] = "MyToolkit.Converters.ColorConverter";
            _typeNameTable[5] = "MyToolkit.Controls.LongListSelector";
            _typeNameTable[6] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[7] = "Windows.UI.Xaml.DataTemplate";
            _typeNameTable[8] = "Boolean";
            _typeNameTable[9] = "MyToolkit.Controls.WatermarkedTextBox";
            _typeNameTable[10] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[11] = "String";
            _typeNameTable[12] = "MyToolkit.Controls.ScrollableItemsControl";
            _typeNameTable[13] = "Windows.UI.Xaml.Controls.ItemsControl";
            _typeNameTable[14] = "Windows.UI.Xaml.Controls.ScrollViewer";
            _typeNameTable[15] = "Windows.UI.Xaml.Thickness";
            _typeNameTable[16] = "MyToolkit.Controls.DataGrid";
            _typeNameTable[17] = "System.Collections.Generic.IList`1<Object>";
            _typeNameTable[18] = "MyToolkit.Collections.IObservableCollectionView";
            _typeNameTable[19] = "MyToolkit.Controls.DataGridColumnBase";
            _typeNameTable[20] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[21] = "Windows.UI.Xaml.Controls.SelectionMode";
            _typeNameTable[22] = "Int32";
            _typeNameTable[23] = "Windows.UI.Xaml.Style";
            _typeNameTable[24] = "MyToolkit.Controls.DataGridColumnCollection";
            _typeNameTable[25] = "System.Collections.ObjectModel.ObservableCollection`1<MyToolkit.Controls.DataGridColumnBase>";
            _typeNameTable[26] = "System.Collections.ObjectModel.Collection`1<MyToolkit.Controls.DataGridColumnBase>";
            _typeNameTable[27] = "Windows.UI.Xaml.GridLength";
            _typeNameTable[28] = "Windows.UI.Xaml.PropertyPath";
            _typeNameTable[29] = "MyToolkit.Controls.ImageButton";
            _typeNameTable[30] = "MyToolkit.Controls.ImageButtonState";
            _typeNameTable[31] = "System.Enum";
            _typeNameTable[32] = "System.ValueType";
            _typeNameTable[33] = "System.Windows.Input.ICommand";
            _typeNameTable[34] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[35] = "MyToolkit.Controls.MtListBox";
            _typeNameTable[36] = "Windows.UI.Xaml.Controls.ListBox";
            _typeNameTable[37] = "MyToolkit.Controls.MtPivot";
            _typeNameTable[38] = "System.Collections.ObjectModel.ObservableCollection`1<MyToolkit.Controls.MtPivotItem>";
            _typeNameTable[39] = "System.Collections.ObjectModel.Collection`1<MyToolkit.Controls.MtPivotItem>";
            _typeNameTable[40] = "MyToolkit.Controls.MtPivotItem";
            _typeNameTable[41] = "MyToolkit.Controls.FadingImage";
            _typeNameTable[42] = "Windows.UI.Xaml.Media.Stretch";
            _typeNameTable[43] = "Double";
            _typeNameTable[44] = "TimeSpan";
            _typeNameTable[45] = "System.Uri";
            _typeNameTable[46] = "MyToolkit.Paging.MtFrame";
            _typeNameTable[47] = "Windows.UI.Xaml.Controls.Frame";
            _typeNameTable[48] = "Windows.UI.Xaml.Media.Animation.TransitionCollection";
            _typeNameTable[49] = "MyToolkit.Paging.MtPageDescription";
            _typeNameTable[50] = "System.Collections.Generic.IReadOnlyList`1<MyToolkit.Paging.MtPageDescription>";
            _typeNameTable[51] = "MyToolkit.Paging.Animations.IPageAnimation";
            _typeNameTable[52] = "MyToolkit.Controls.AppBarToggleButton";
            _typeNameTable[53] = "Windows.UI.Xaml.Controls.Primitives.ToggleButton";
            _typeNameTable[54] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[55] = "MyToolkit.Controls.AppBarButton";
            _typeNameTable[56] = "Windows.UI.Xaml.Controls.Button";
            _typeNameTable[57] = "MyToolkit.Controls.TextButton";
            _typeNameTable[58] = "MyToolkit.Controls.MenuListBox";
            _typeNameTable[59] = "MyToolkit.Controls.ColorChooser";
            _typeNameTable[60] = "Windows.UI.Color";
            _typeNameTable[61] = "Windows.UI.Color[]";
            _typeNameTable[62] = "System.Array";
            _typeNameTable[63] = "Byte";
            _typeNameTable[64] = "MyToolkit.Controls.PanAndZoomViewer";
            _typeNameTable[65] = "MyToolkit.Controls.PanAndZoomImage";
            _typeNameTable[66] = "MyToolkit.Controls.Hamburger";
            _typeNameTable[67] = "Windows.UI.Xaml.Controls.SplitViewDisplayMode";
            _typeNameTable[68] = "System.Collections.ObjectModel.ObservableCollection`1<MyToolkit.Controls.HamburgerItem>";
            _typeNameTable[69] = "System.Collections.ObjectModel.Collection`1<MyToolkit.Controls.HamburgerItem>";
            _typeNameTable[70] = "MyToolkit.Controls.HamburgerItem";
            _typeNameTable[71] = "MyToolkit.Controls.ExtendedItemsControl";
            _typeNameTable[72] = "MyToolkit.Controls.MtItemsControl";
            _typeNameTable[73] = "MyToolkit.Controls.ProxyElement";
            _typeNameTable[74] = "MyToolkit.Controls.DataGridTextColumn";
            _typeNameTable[75] = "MyToolkit.Controls.DataGridBoundColumn";
            _typeNameTable[76] = "Windows.UI.Text.FontStyle";
            _typeNameTable[77] = "Windows.UI.Xaml.Data.Binding";

            _typeTable = new global::System.Type[78];
            _typeTable[0] = typeof(global::MyToolkit.Converters.NotConverter);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::MyToolkit.Converters.VisibilityConverter);
            _typeTable[3] = typeof(global::MyToolkit.Converters.LongListSelectorBackgroundConverter);
            _typeTable[4] = typeof(global::MyToolkit.Converters.ColorConverter);
            _typeTable[5] = typeof(global::MyToolkit.Controls.LongListSelector);
            _typeTable[6] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[7] = typeof(global::Windows.UI.Xaml.DataTemplate);
            _typeTable[8] = typeof(global::System.Boolean);
            _typeTable[9] = typeof(global::MyToolkit.Controls.WatermarkedTextBox);
            _typeTable[10] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[11] = typeof(global::System.String);
            _typeTable[12] = typeof(global::MyToolkit.Controls.ScrollableItemsControl);
            _typeTable[13] = typeof(global::Windows.UI.Xaml.Controls.ItemsControl);
            _typeTable[14] = typeof(global::Windows.UI.Xaml.Controls.ScrollViewer);
            _typeTable[15] = typeof(global::Windows.UI.Xaml.Thickness);
            _typeTable[16] = typeof(global::MyToolkit.Controls.DataGrid);
            _typeTable[17] = typeof(global::System.Collections.Generic.IList<global::System.Object>);
            _typeTable[18] = typeof(global::MyToolkit.Collections.IObservableCollectionView);
            _typeTable[19] = typeof(global::MyToolkit.Controls.DataGridColumnBase);
            _typeTable[20] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[21] = typeof(global::Windows.UI.Xaml.Controls.SelectionMode);
            _typeTable[22] = typeof(global::System.Int32);
            _typeTable[23] = typeof(global::Windows.UI.Xaml.Style);
            _typeTable[24] = typeof(global::MyToolkit.Controls.DataGridColumnCollection);
            _typeTable[25] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::MyToolkit.Controls.DataGridColumnBase>);
            _typeTable[26] = typeof(global::System.Collections.ObjectModel.Collection<global::MyToolkit.Controls.DataGridColumnBase>);
            _typeTable[27] = typeof(global::Windows.UI.Xaml.GridLength);
            _typeTable[28] = typeof(global::Windows.UI.Xaml.PropertyPath);
            _typeTable[29] = typeof(global::MyToolkit.Controls.ImageButton);
            _typeTable[30] = typeof(global::MyToolkit.Controls.ImageButtonState);
            _typeTable[31] = typeof(global::System.Enum);
            _typeTable[32] = typeof(global::System.ValueType);
            _typeTable[33] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[34] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[35] = typeof(global::MyToolkit.Controls.MtListBox);
            _typeTable[36] = typeof(global::Windows.UI.Xaml.Controls.ListBox);
            _typeTable[37] = typeof(global::MyToolkit.Controls.MtPivot);
            _typeTable[38] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::MyToolkit.Controls.MtPivotItem>);
            _typeTable[39] = typeof(global::System.Collections.ObjectModel.Collection<global::MyToolkit.Controls.MtPivotItem>);
            _typeTable[40] = typeof(global::MyToolkit.Controls.MtPivotItem);
            _typeTable[41] = typeof(global::MyToolkit.Controls.FadingImage);
            _typeTable[42] = typeof(global::Windows.UI.Xaml.Media.Stretch);
            _typeTable[43] = typeof(global::System.Double);
            _typeTable[44] = typeof(global::System.TimeSpan);
            _typeTable[45] = typeof(global::System.Uri);
            _typeTable[46] = typeof(global::MyToolkit.Paging.MtFrame);
            _typeTable[47] = typeof(global::Windows.UI.Xaml.Controls.Frame);
            _typeTable[48] = typeof(global::Windows.UI.Xaml.Media.Animation.TransitionCollection);
            _typeTable[49] = typeof(global::MyToolkit.Paging.MtPageDescription);
            _typeTable[50] = typeof(global::System.Collections.Generic.IReadOnlyList<global::MyToolkit.Paging.MtPageDescription>);
            _typeTable[51] = typeof(global::MyToolkit.Paging.Animations.IPageAnimation);
            _typeTable[52] = typeof(global::MyToolkit.Controls.AppBarToggleButton);
            _typeTable[53] = typeof(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton);
            _typeTable[54] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[55] = typeof(global::MyToolkit.Controls.AppBarButton);
            _typeTable[56] = typeof(global::Windows.UI.Xaml.Controls.Button);
            _typeTable[57] = typeof(global::MyToolkit.Controls.TextButton);
            _typeTable[58] = typeof(global::MyToolkit.Controls.MenuListBox);
            _typeTable[59] = typeof(global::MyToolkit.Controls.ColorChooser);
            _typeTable[60] = typeof(global::Windows.UI.Color);
            _typeTable[61] = typeof(global::Windows.UI.Color[]);
            _typeTable[62] = typeof(global::System.Array);
            _typeTable[63] = typeof(global::System.Byte);
            _typeTable[64] = typeof(global::MyToolkit.Controls.PanAndZoomViewer);
            _typeTable[65] = typeof(global::MyToolkit.Controls.PanAndZoomImage);
            _typeTable[66] = typeof(global::MyToolkit.Controls.Hamburger);
            _typeTable[67] = typeof(global::Windows.UI.Xaml.Controls.SplitViewDisplayMode);
            _typeTable[68] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::MyToolkit.Controls.HamburgerItem>);
            _typeTable[69] = typeof(global::System.Collections.ObjectModel.Collection<global::MyToolkit.Controls.HamburgerItem>);
            _typeTable[70] = typeof(global::MyToolkit.Controls.HamburgerItem);
            _typeTable[71] = typeof(global::MyToolkit.Controls.ExtendedItemsControl);
            _typeTable[72] = typeof(global::MyToolkit.Controls.MtItemsControl);
            _typeTable[73] = typeof(global::MyToolkit.Controls.ProxyElement);
            _typeTable[74] = typeof(global::MyToolkit.Controls.DataGridTextColumn);
            _typeTable[75] = typeof(global::MyToolkit.Controls.DataGridBoundColumn);
            _typeTable[76] = typeof(global::Windows.UI.Text.FontStyle);
            _typeTable[77] = typeof(global::Windows.UI.Xaml.Data.Binding);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_NotConverter() { return new global::MyToolkit.Converters.NotConverter(); }
        private object Activate_2_VisibilityConverter() { return new global::MyToolkit.Converters.VisibilityConverter(); }
        private object Activate_3_LongListSelectorBackgroundConverter() { return new global::MyToolkit.Converters.LongListSelectorBackgroundConverter(); }
        private object Activate_4_ColorConverter() { return new global::MyToolkit.Converters.ColorConverter(); }
        private object Activate_5_LongListSelector() { return new global::MyToolkit.Controls.LongListSelector(); }
        private object Activate_9_WatermarkedTextBox() { return new global::MyToolkit.Controls.WatermarkedTextBox(); }
        private object Activate_12_ScrollableItemsControl() { return new global::MyToolkit.Controls.ScrollableItemsControl(); }
        private object Activate_16_DataGrid() { return new global::MyToolkit.Controls.DataGrid(); }
        private object Activate_24_DataGridColumnCollection() { return new global::MyToolkit.Controls.DataGridColumnCollection(); }
        private object Activate_25_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::MyToolkit.Controls.DataGridColumnBase>(); }
        private object Activate_26_Collection() { return new global::System.Collections.ObjectModel.Collection<global::MyToolkit.Controls.DataGridColumnBase>(); }
        private object Activate_29_ImageButton() { return new global::MyToolkit.Controls.ImageButton(); }
        private object Activate_35_MtListBox() { return new global::MyToolkit.Controls.MtListBox(); }
        private object Activate_37_MtPivot() { return new global::MyToolkit.Controls.MtPivot(); }
        private object Activate_38_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::MyToolkit.Controls.MtPivotItem>(); }
        private object Activate_39_Collection() { return new global::System.Collections.ObjectModel.Collection<global::MyToolkit.Controls.MtPivotItem>(); }
        private object Activate_40_MtPivotItem() { return new global::MyToolkit.Controls.MtPivotItem(); }
        private object Activate_41_FadingImage() { return new global::MyToolkit.Controls.FadingImage(); }
        private object Activate_46_MtFrame() { return new global::MyToolkit.Paging.MtFrame(); }
        private object Activate_52_AppBarToggleButton() { return new global::MyToolkit.Controls.AppBarToggleButton(); }
        private object Activate_55_AppBarButton() { return new global::MyToolkit.Controls.AppBarButton(); }
        private object Activate_57_TextButton() { return new global::MyToolkit.Controls.TextButton(); }
        private object Activate_58_MenuListBox() { return new global::MyToolkit.Controls.MenuListBox(); }
        private object Activate_59_ColorChooser() { return new global::MyToolkit.Controls.ColorChooser(); }
        private object Activate_64_PanAndZoomViewer() { return new global::MyToolkit.Controls.PanAndZoomViewer(); }
        private object Activate_65_PanAndZoomImage() { return new global::MyToolkit.Controls.PanAndZoomImage(); }
        private object Activate_66_Hamburger() { return new global::MyToolkit.Controls.Hamburger(); }
        private object Activate_68_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::MyToolkit.Controls.HamburgerItem>(); }
        private object Activate_69_Collection() { return new global::System.Collections.ObjectModel.Collection<global::MyToolkit.Controls.HamburgerItem>(); }
        private object Activate_70_HamburgerItem() { return new global::MyToolkit.Controls.HamburgerItem(); }
        private object Activate_71_ExtendedItemsControl() { return new global::MyToolkit.Controls.ExtendedItemsControl(); }
        private object Activate_72_MtItemsControl() { return new global::MyToolkit.Controls.MtItemsControl(); }
        private object Activate_73_ProxyElement() { return new global::MyToolkit.Controls.ProxyElement(); }
        private object Activate_74_DataGridTextColumn() { return new global::MyToolkit.Controls.DataGridTextColumn(); }
        private void VectorAdd_17_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_24_DataGridColumnCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MyToolkit.Controls.DataGridColumnBase>)instance;
            var newItem = (global::MyToolkit.Controls.DataGridColumnBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_25_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MyToolkit.Controls.DataGridColumnBase>)instance;
            var newItem = (global::MyToolkit.Controls.DataGridColumnBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_26_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MyToolkit.Controls.DataGridColumnBase>)instance;
            var newItem = (global::MyToolkit.Controls.DataGridColumnBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_38_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MyToolkit.Controls.MtPivotItem>)instance;
            var newItem = (global::MyToolkit.Controls.MtPivotItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_39_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MyToolkit.Controls.MtPivotItem>)instance;
            var newItem = (global::MyToolkit.Controls.MtPivotItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_68_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MyToolkit.Controls.HamburgerItem>)instance;
            var newItem = (global::MyToolkit.Controls.HamburgerItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_69_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MyToolkit.Controls.HamburgerItem>)instance;
            var newItem = (global::MyToolkit.Controls.HamburgerItem)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  MyToolkit.Converters.NotConverter
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_NotConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  MyToolkit.Converters.VisibilityConverter
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_2_VisibilityConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  MyToolkit.Converters.LongListSelectorBackgroundConverter
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_LongListSelectorBackgroundConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  MyToolkit.Converters.ColorConverter
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_ColorConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  MyToolkit.Controls.LongListSelector
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_5_LongListSelector;
                userType.AddMemberName("ItemTemplate");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("UseNavigationEvent");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  Windows.UI.Xaml.DataTemplate
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Boolean
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  MyToolkit.Controls.WatermarkedTextBox
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_9_WatermarkedTextBox;
                userType.AddMemberName("WatermarkBrush");
                userType.AddMemberName("Watermark");
                userType.AddMemberName("Text");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  String
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  MyToolkit.Controls.ScrollableItemsControl
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ItemsControl"));
                userType.Activator = Activate_12_ScrollableItemsControl;
                userType.AddMemberName("ScrollViewer");
                userType.AddMemberName("TriggerScrolledToEndEvents");
                userType.AddMemberName("InnerMargin");
                userType.AddMemberName("IsScrolling");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  Windows.UI.Xaml.Controls.ItemsControl
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Windows.UI.Xaml.Controls.ScrollViewer
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Windows.UI.Xaml.Thickness
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  MyToolkit.Controls.DataGrid
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_16_DataGrid;
                userType.AddMemberName("HeaderBackground");
                userType.AddMemberName("RowBackgroundOddBrush");
                userType.AddMemberName("CellTemplate");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("SelectedItems");
                userType.AddMemberName("Items");
                userType.AddMemberName("SelectedColumn");
                userType.AddMemberName("SelectionMode");
                userType.AddMemberName("SelectedItem");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("DefaultOrderIndex");
                userType.AddMemberName("RowStyle");
                userType.AddMemberName("ItemDetailsTemplate");
                userType.AddMemberName("Columns");
                userType.AddMemberName("RowBackgroundEvenBrush");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  System.Collections.Generic.IList`1<Object>
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_17_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 18:   //  MyToolkit.Collections.IObservableCollectionView
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 19:   //  MyToolkit.Controls.DataGridColumnBase
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("CanSort");
                userType.AddMemberName("IsSelected");
                userType.AddMemberName("IsAscending");
                userType.AddMemberName("IsAscendingDefault");
                userType.AddMemberName("Header");
                userType.AddMemberName("Width");
                userType.AddMemberName("OrderPropertyPath");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  Windows.UI.Xaml.Controls.SelectionMode
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  Int32
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  Windows.UI.Xaml.Style
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  MyToolkit.Controls.DataGridColumnCollection
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<MyToolkit.Controls.DataGridColumnBase>"));
                userType.CollectionAdd = VectorAdd_24_DataGridColumnCollection;
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  System.Collections.ObjectModel.ObservableCollection`1<MyToolkit.Controls.DataGridColumnBase>
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<MyToolkit.Controls.DataGridColumnBase>"));
                userType.Activator = Activate_25_ObservableCollection;
                userType.CollectionAdd = VectorAdd_25_ObservableCollection;
                xamlType = userType;
                break;

            case 26:   //  System.Collections.ObjectModel.Collection`1<MyToolkit.Controls.DataGridColumnBase>
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_26_Collection;
                userType.CollectionAdd = VectorAdd_26_Collection;
                xamlType = userType;
                break;

            case 27:   //  Windows.UI.Xaml.GridLength
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  Windows.UI.Xaml.PropertyPath
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  MyToolkit.Controls.ImageButton
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_29_ImageButton;
                userType.AddMemberName("State");
                userType.AddMemberName("Command");
                userType.AddMemberName("CommandParameter");
                userType.AddMemberName("Content");
                userType.AddMemberName("PressedContent");
                userType.AddMemberName("OverContent");
                userType.AddMemberName("Header");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  MyToolkit.Controls.ImageButtonState
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Normal", global::MyToolkit.Controls.ImageButtonState.Normal);
                userType.AddEnumValue("Over", global::MyToolkit.Controls.ImageButtonState.Over);
                userType.AddEnumValue("Pressed", global::MyToolkit.Controls.ImageButtonState.Pressed);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  System.Enum
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 32:   //  System.ValueType
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 33:   //  System.Windows.Input.ICommand
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 34:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 35:   //  MyToolkit.Controls.MtListBox
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ListBox"));
                userType.Activator = Activate_35_MtListBox;
                userType.AddMemberName("ScrollViewer");
                userType.AddMemberName("TriggerScrolledToEndEvents");
                userType.AddMemberName("InnerMargin");
                userType.AddMemberName("IsScrolling");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  Windows.UI.Xaml.Controls.ListBox
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 37:   //  MyToolkit.Controls.MtPivot
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_37_MtPivot;
                userType.SetContentPropertyName("MyToolkit.Controls.MtPivot.Items");
                userType.AddMemberName("Items");
                userType.AddMemberName("SelectedBrush");
                userType.AddMemberName("UnselectedBrush");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("IsHeaderEnabled");
                userType.AddMemberName("SelectedItem");
                userType.AddMemberName("SelectedIndex");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  System.Collections.ObjectModel.ObservableCollection`1<MyToolkit.Controls.MtPivotItem>
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<MyToolkit.Controls.MtPivotItem>"));
                userType.CollectionAdd = VectorAdd_38_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 39:   //  System.Collections.ObjectModel.Collection`1<MyToolkit.Controls.MtPivotItem>
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_39_Collection;
                userType.CollectionAdd = VectorAdd_39_Collection;
                xamlType = userType;
                break;

            case 40:   //  MyToolkit.Controls.MtPivotItem
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_40_MtPivotItem;
                userType.SetContentPropertyName("MyToolkit.Controls.MtPivotItem.Content");
                userType.AddMemberName("Content");
                userType.AddMemberName("Header");
                userType.AddMemberName("Preload");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 41:   //  MyToolkit.Controls.FadingImage
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_41_FadingImage;
                userType.AddMemberName("Stretch");
                userType.AddMemberName("FadingOpacity");
                userType.AddMemberName("FadingDuration");
                userType.AddMemberName("WaitForNextImage");
                userType.AddMemberName("Source");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  Windows.UI.Xaml.Media.Stretch
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 43:   //  Double
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 44:   //  TimeSpan
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 45:   //  System.Uri
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 46:   //  MyToolkit.Paging.MtFrame
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_46_MtFrame;
                userType.AddMemberName("ShowNavigationOnAppInAndOut");
                userType.AddMemberName("DisableForwardStack");
                userType.AddMemberName("DisableCache");
                userType.AddMemberName("InternalFrame");
                userType.AddMemberName("AutomaticBackButtonHandling");
                userType.AddMemberName("Content");
                userType.AddMemberName("ContentTransitions");
                userType.AddMemberName("GoBackCommand");
                userType.AddMemberName("IsFirstPage");
                userType.AddMemberName("PreviousPage");
                userType.AddMemberName("CurrentPage");
                userType.AddMemberName("NextPage");
                userType.AddMemberName("CanGoBack");
                userType.AddMemberName("CanGoForward");
                userType.AddMemberName("Pages");
                userType.AddMemberName("BackStackDepth");
                userType.AddMemberName("PageAnimation");
                userType.AddMemberName("IsNavigating");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 47:   //  Windows.UI.Xaml.Controls.Frame
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 48:   //  Windows.UI.Xaml.Media.Animation.TransitionCollection
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 49:   //  MyToolkit.Paging.MtPageDescription
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 50:   //  System.Collections.Generic.IReadOnlyList`1<MyToolkit.Paging.MtPageDescription>
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 51:   //  MyToolkit.Paging.Animations.IPageAnimation
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 52:   //  MyToolkit.Controls.AppBarToggleButton
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Primitives.ToggleButton"));
                userType.Activator = Activate_52_AppBarToggleButton;
                userType.AddMemberName("Header");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 53:   //  Windows.UI.Xaml.Controls.Primitives.ToggleButton
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 54:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 55:   //  MyToolkit.Controls.AppBarButton
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Button"));
                userType.Activator = Activate_55_AppBarButton;
                userType.AddMemberName("Header");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 56:   //  Windows.UI.Xaml.Controls.Button
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 57:   //  MyToolkit.Controls.TextButton
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Button"));
                userType.Activator = Activate_57_TextButton;
                userType.AddMemberName("Header");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 58:   //  MyToolkit.Controls.MenuListBox
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_58_MenuListBox;
                userType.AddMemberName("ItemsSource");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 59:   //  MyToolkit.Controls.ColorChooser
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_59_ColorChooser;
                userType.AddMemberName("SelectedColor");
                userType.AddMemberName("Colors");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 60:   //  Windows.UI.Color
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("B");
                userType.AddMemberName("G");
                userType.AddMemberName("R");
                xamlType = userType;
                break;

            case 61:   //  Windows.UI.Color[]
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Array"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 62:   //  System.Array
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 63:   //  Byte
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 64:   //  MyToolkit.Controls.PanAndZoomViewer
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_64_PanAndZoomViewer;
                userType.SetContentPropertyName("MyToolkit.Controls.PanAndZoomViewer.Content");
                userType.AddMemberName("Content");
                userType.AddMemberName("MaxZoomFactor");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 65:   //  MyToolkit.Controls.PanAndZoomImage
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Controls.PanAndZoomViewer"));
                userType.Activator = Activate_65_PanAndZoomImage;
                userType.SetContentPropertyName("MyToolkit.Controls.PanAndZoomViewer.Content");
                userType.AddMemberName("Stretch");
                userType.AddMemberName("Source");
                userType.AddMemberName("AutomaticZoomFactor");
                userType.AddMemberName("InnerMargin");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 66:   //  MyToolkit.Controls.Hamburger
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_66_Hamburger;
                userType.AddMemberName("DisplayMode");
                userType.AddMemberName("PaneWidth");
                userType.AddMemberName("IsPaneOpen");
                userType.AddMemberName("HamburgerBackgroundBrush");
                userType.AddMemberName("HamburgerForegroundBrush");
                userType.AddMemberName("Content");
                userType.AddMemberName("ContentMargin");
                userType.AddMemberName("TopItems");
                userType.AddMemberName("BottomItems");
                userType.AddMemberName("SelectedTopItem");
                userType.AddMemberName("SelectedBottomItem");
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("IsPaneVisible");
                userType.AddMemberName("SelectedItem");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 67:   //  Windows.UI.Xaml.Controls.SplitViewDisplayMode
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 68:   //  System.Collections.ObjectModel.ObservableCollection`1<MyToolkit.Controls.HamburgerItem>
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<MyToolkit.Controls.HamburgerItem>"));
                userType.CollectionAdd = VectorAdd_68_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 69:   //  System.Collections.ObjectModel.Collection`1<MyToolkit.Controls.HamburgerItem>
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_69_Collection;
                userType.CollectionAdd = VectorAdd_69_Collection;
                xamlType = userType;
                break;

            case 70:   //  MyToolkit.Controls.HamburgerItem
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_70_HamburgerItem;
                userType.AddMemberName("Icon");
                userType.AddMemberName("ContentIcon");
                userType.AddMemberName("Content");
                userType.AddMemberName("AutoClosePane");
                userType.AddMemberName("ShowContentIcon");
                userType.AddMemberName("IsEnabled");
                userType.AddMemberName("CanBeSelected");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 71:   //  MyToolkit.Controls.ExtendedItemsControl
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Controls.MtItemsControl"));
                userType.Activator = Activate_71_ExtendedItemsControl;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 72:   //  MyToolkit.Controls.MtItemsControl
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ItemsControl"));
                userType.Activator = Activate_72_MtItemsControl;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 73:   //  MyToolkit.Controls.ProxyElement
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_73_ProxyElement;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 74:   //  MyToolkit.Controls.DataGridTextColumn
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Controls.DataGridBoundColumn"));
                userType.Activator = Activate_74_DataGridTextColumn;
                userType.AddMemberName("Style");
                userType.AddMemberName("FontSize");
                userType.AddMemberName("FontStyle");
                userType.AddMemberName("Foreground");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 75:   //  MyToolkit.Controls.DataGridBoundColumn
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Controls.DataGridColumnBase"));
                userType.AddMemberName("Binding");
                userType.AddMemberName("OrderPropertyPath");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 76:   //  Windows.UI.Text.FontStyle
                userType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Normal", global::Windows.UI.Text.FontStyle.Normal);
                userType.AddEnumValue("Oblique", global::Windows.UI.Text.FontStyle.Oblique);
                userType.AddEnumValue("Italic", global::Windows.UI.Text.FontStyle.Italic);
                xamlType = userType;
                break;

            case 77:   //  Windows.UI.Xaml.Data.Binding
                xamlType = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }


        private object get_0_LongListSelector_ItemTemplate(object instance)
        {
            var that = (global::MyToolkit.Controls.LongListSelector)instance;
            return that.ItemTemplate;
        }
        private void set_0_LongListSelector_ItemTemplate(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.LongListSelector)instance;
            that.ItemTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_1_LongListSelector_ItemsSource(object instance)
        {
            var that = (global::MyToolkit.Controls.LongListSelector)instance;
            return that.ItemsSource;
        }
        private void set_1_LongListSelector_ItemsSource(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.LongListSelector)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_2_LongListSelector_UseNavigationEvent(object instance)
        {
            var that = (global::MyToolkit.Controls.LongListSelector)instance;
            return that.UseNavigationEvent;
        }
        private void set_2_LongListSelector_UseNavigationEvent(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.LongListSelector)instance;
            that.UseNavigationEvent = (global::System.Boolean)Value;
        }
        private object get_3_WatermarkedTextBox_WatermarkBrush(object instance)
        {
            var that = (global::MyToolkit.Controls.WatermarkedTextBox)instance;
            return that.WatermarkBrush;
        }
        private void set_3_WatermarkedTextBox_WatermarkBrush(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.WatermarkedTextBox)instance;
            that.WatermarkBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_4_WatermarkedTextBox_Watermark(object instance)
        {
            var that = (global::MyToolkit.Controls.WatermarkedTextBox)instance;
            return that.Watermark;
        }
        private void set_4_WatermarkedTextBox_Watermark(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.WatermarkedTextBox)instance;
            that.Watermark = (global::System.String)Value;
        }
        private object get_5_WatermarkedTextBox_Text(object instance)
        {
            var that = (global::MyToolkit.Controls.WatermarkedTextBox)instance;
            return that.Text;
        }
        private void set_5_WatermarkedTextBox_Text(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.WatermarkedTextBox)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_6_ScrollableItemsControl_ScrollViewer(object instance)
        {
            var that = (global::MyToolkit.Controls.ScrollableItemsControl)instance;
            return that.ScrollViewer;
        }
        private object get_7_ScrollableItemsControl_TriggerScrolledToEndEvents(object instance)
        {
            var that = (global::MyToolkit.Controls.ScrollableItemsControl)instance;
            return that.TriggerScrolledToEndEvents;
        }
        private void set_7_ScrollableItemsControl_TriggerScrolledToEndEvents(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.ScrollableItemsControl)instance;
            that.TriggerScrolledToEndEvents = (global::System.Boolean)Value;
        }
        private object get_8_ScrollableItemsControl_InnerMargin(object instance)
        {
            var that = (global::MyToolkit.Controls.ScrollableItemsControl)instance;
            return that.InnerMargin;
        }
        private void set_8_ScrollableItemsControl_InnerMargin(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.ScrollableItemsControl)instance;
            that.InnerMargin = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_9_ScrollableItemsControl_IsScrolling(object instance)
        {
            var that = (global::MyToolkit.Controls.ScrollableItemsControl)instance;
            return that.IsScrolling;
        }
        private object get_10_DataGrid_HeaderBackground(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.HeaderBackground;
        }
        private void set_10_DataGrid_HeaderBackground(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.HeaderBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_11_DataGrid_RowBackgroundOddBrush(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.RowBackgroundOddBrush;
        }
        private void set_11_DataGrid_RowBackgroundOddBrush(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.RowBackgroundOddBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_12_DataGrid_CellTemplate(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.CellTemplate;
        }
        private void set_12_DataGrid_CellTemplate(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.CellTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_13_DataGrid_HeaderTemplate(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.HeaderTemplate;
        }
        private void set_13_DataGrid_HeaderTemplate(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_14_DataGrid_SelectedItems(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.SelectedItems;
        }
        private object get_15_DataGrid_Items(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.Items;
        }
        private object get_16_DataGrid_SelectedColumn(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.SelectedColumn;
        }
        private object get_17_DataGrid_SelectionMode(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.SelectionMode;
        }
        private void set_17_DataGrid_SelectionMode(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.SelectionMode = (global::Windows.UI.Xaml.Controls.SelectionMode)Value;
        }
        private object get_18_DataGrid_SelectedItem(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.SelectedItem;
        }
        private void set_18_DataGrid_SelectedItem(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_19_DataGrid_ItemsSource(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.ItemsSource;
        }
        private void set_19_DataGrid_ItemsSource(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_20_DataGrid_DefaultOrderIndex(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.DefaultOrderIndex;
        }
        private void set_20_DataGrid_DefaultOrderIndex(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.DefaultOrderIndex = (global::System.Int32)Value;
        }
        private object get_21_DataGrid_RowStyle(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.RowStyle;
        }
        private void set_21_DataGrid_RowStyle(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.RowStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_22_DataGrid_ItemDetailsTemplate(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.ItemDetailsTemplate;
        }
        private void set_22_DataGrid_ItemDetailsTemplate(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.ItemDetailsTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_23_DataGrid_Columns(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.Columns;
        }
        private void set_23_DataGrid_Columns(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.Columns = (global::MyToolkit.Controls.DataGridColumnCollection)Value;
        }
        private object get_24_DataGridColumnBase_CanSort(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            return that.CanSort;
        }
        private void set_24_DataGridColumnBase_CanSort(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            that.CanSort = (global::System.Boolean)Value;
        }
        private object get_25_DataGridColumnBase_IsSelected(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            return that.IsSelected;
        }
        private object get_26_DataGridColumnBase_IsAscending(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            return that.IsAscending;
        }
        private object get_27_DataGridColumnBase_IsAscendingDefault(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            return that.IsAscendingDefault;
        }
        private void set_27_DataGridColumnBase_IsAscendingDefault(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            that.IsAscendingDefault = (global::System.Boolean)Value;
        }
        private object get_28_DataGridColumnBase_Header(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            return that.Header;
        }
        private void set_28_DataGridColumnBase_Header(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_29_DataGridColumnBase_Width(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            return that.Width;
        }
        private void set_29_DataGridColumnBase_Width(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            that.Width = (global::Windows.UI.Xaml.GridLength)Value;
        }
        private object get_30_DataGridColumnBase_OrderPropertyPath(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            return that.OrderPropertyPath;
        }
        private object get_31_DataGrid_RowBackgroundEvenBrush(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.RowBackgroundEvenBrush;
        }
        private void set_31_DataGrid_RowBackgroundEvenBrush(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.RowBackgroundEvenBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_32_ImageButton_State(object instance)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            return that.State;
        }
        private object get_33_ImageButton_Command(object instance)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            return that.Command;
        }
        private void set_33_ImageButton_Command(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_34_ImageButton_CommandParameter(object instance)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            return that.CommandParameter;
        }
        private void set_34_ImageButton_CommandParameter(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_35_ImageButton_Content(object instance)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            return that.Content;
        }
        private void set_35_ImageButton_Content(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            that.Content = (global::Windows.UI.Xaml.FrameworkElement)Value;
        }
        private object get_36_ImageButton_PressedContent(object instance)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            return that.PressedContent;
        }
        private void set_36_ImageButton_PressedContent(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            that.PressedContent = (global::Windows.UI.Xaml.FrameworkElement)Value;
        }
        private object get_37_ImageButton_OverContent(object instance)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            return that.OverContent;
        }
        private void set_37_ImageButton_OverContent(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            that.OverContent = (global::Windows.UI.Xaml.FrameworkElement)Value;
        }
        private object get_38_ImageButton_Header(object instance)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            return that.Header;
        }
        private void set_38_ImageButton_Header(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.ImageButton)instance;
            that.Header = (global::System.String)Value;
        }
        private object get_39_MtListBox_ScrollViewer(object instance)
        {
            var that = (global::MyToolkit.Controls.MtListBox)instance;
            return that.ScrollViewer;
        }
        private object get_40_MtListBox_TriggerScrolledToEndEvents(object instance)
        {
            var that = (global::MyToolkit.Controls.MtListBox)instance;
            return that.TriggerScrolledToEndEvents;
        }
        private void set_40_MtListBox_TriggerScrolledToEndEvents(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.MtListBox)instance;
            that.TriggerScrolledToEndEvents = (global::System.Boolean)Value;
        }
        private object get_41_MtListBox_InnerMargin(object instance)
        {
            var that = (global::MyToolkit.Controls.MtListBox)instance;
            return that.InnerMargin;
        }
        private void set_41_MtListBox_InnerMargin(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.MtListBox)instance;
            that.InnerMargin = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_42_MtListBox_IsScrolling(object instance)
        {
            var that = (global::MyToolkit.Controls.MtListBox)instance;
            return that.IsScrolling;
        }
        private object get_43_MtPivot_Items(object instance)
        {
            var that = (global::MyToolkit.Controls.MtPivot)instance;
            return that.Items;
        }
        private object get_44_MtPivotItem_Content(object instance)
        {
            var that = (global::MyToolkit.Controls.MtPivotItem)instance;
            return that.Content;
        }
        private void set_44_MtPivotItem_Content(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.MtPivotItem)instance;
            that.Content = (global::Windows.UI.Xaml.FrameworkElement)Value;
        }
        private object get_45_MtPivotItem_Header(object instance)
        {
            var that = (global::MyToolkit.Controls.MtPivotItem)instance;
            return that.Header;
        }
        private void set_45_MtPivotItem_Header(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.MtPivotItem)instance;
            that.Header = (global::System.String)Value;
        }
        private object get_46_MtPivotItem_Preload(object instance)
        {
            var that = (global::MyToolkit.Controls.MtPivotItem)instance;
            return that.Preload;
        }
        private void set_46_MtPivotItem_Preload(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.MtPivotItem)instance;
            that.Preload = (global::System.Boolean)Value;
        }
        private object get_47_MtPivot_SelectedBrush(object instance)
        {
            var that = (global::MyToolkit.Controls.MtPivot)instance;
            return that.SelectedBrush;
        }
        private void set_47_MtPivot_SelectedBrush(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.MtPivot)instance;
            that.SelectedBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_48_MtPivot_UnselectedBrush(object instance)
        {
            var that = (global::MyToolkit.Controls.MtPivot)instance;
            return that.UnselectedBrush;
        }
        private void set_48_MtPivot_UnselectedBrush(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.MtPivot)instance;
            that.UnselectedBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_49_MtPivot_HeaderTemplate(object instance)
        {
            var that = (global::MyToolkit.Controls.MtPivot)instance;
            return that.HeaderTemplate;
        }
        private void set_49_MtPivot_HeaderTemplate(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.MtPivot)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_50_MtPivot_IsHeaderEnabled(object instance)
        {
            var that = (global::MyToolkit.Controls.MtPivot)instance;
            return that.IsHeaderEnabled;
        }
        private void set_50_MtPivot_IsHeaderEnabled(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.MtPivot)instance;
            that.IsHeaderEnabled = (global::System.Boolean)Value;
        }
        private object get_51_MtPivot_SelectedItem(object instance)
        {
            var that = (global::MyToolkit.Controls.MtPivot)instance;
            return that.SelectedItem;
        }
        private void set_51_MtPivot_SelectedItem(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.MtPivot)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_52_MtPivot_SelectedIndex(object instance)
        {
            var that = (global::MyToolkit.Controls.MtPivot)instance;
            return that.SelectedIndex;
        }
        private void set_52_MtPivot_SelectedIndex(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.MtPivot)instance;
            that.SelectedIndex = (global::System.Int32)Value;
        }
        private object get_53_FadingImage_Stretch(object instance)
        {
            var that = (global::MyToolkit.Controls.FadingImage)instance;
            return that.Stretch;
        }
        private void set_53_FadingImage_Stretch(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.FadingImage)instance;
            that.Stretch = (global::Windows.UI.Xaml.Media.Stretch)Value;
        }
        private object get_54_FadingImage_FadingOpacity(object instance)
        {
            var that = (global::MyToolkit.Controls.FadingImage)instance;
            return that.FadingOpacity;
        }
        private void set_54_FadingImage_FadingOpacity(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.FadingImage)instance;
            that.FadingOpacity = (global::System.Double)Value;
        }
        private object get_55_FadingImage_FadingDuration(object instance)
        {
            var that = (global::MyToolkit.Controls.FadingImage)instance;
            return that.FadingDuration;
        }
        private void set_55_FadingImage_FadingDuration(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.FadingImage)instance;
            that.FadingDuration = (global::System.TimeSpan)Value;
        }
        private object get_56_FadingImage_WaitForNextImage(object instance)
        {
            var that = (global::MyToolkit.Controls.FadingImage)instance;
            return that.WaitForNextImage;
        }
        private void set_56_FadingImage_WaitForNextImage(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.FadingImage)instance;
            that.WaitForNextImage = (global::System.Boolean)Value;
        }
        private object get_57_FadingImage_Source(object instance)
        {
            var that = (global::MyToolkit.Controls.FadingImage)instance;
            return that.Source;
        }
        private void set_57_FadingImage_Source(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.FadingImage)instance;
            that.Source = (global::System.Uri)Value;
        }
        private object get_58_MtFrame_ShowNavigationOnAppInAndOut(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.ShowNavigationOnAppInAndOut;
        }
        private void set_58_MtFrame_ShowNavigationOnAppInAndOut(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            that.ShowNavigationOnAppInAndOut = (global::System.Boolean)Value;
        }
        private object get_59_MtFrame_DisableForwardStack(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.DisableForwardStack;
        }
        private void set_59_MtFrame_DisableForwardStack(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            that.DisableForwardStack = (global::System.Boolean)Value;
        }
        private object get_60_MtFrame_DisableCache(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.DisableCache;
        }
        private void set_60_MtFrame_DisableCache(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            that.DisableCache = (global::System.Boolean)Value;
        }
        private object get_61_MtFrame_InternalFrame(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.InternalFrame;
        }
        private object get_62_MtFrame_AutomaticBackButtonHandling(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.AutomaticBackButtonHandling;
        }
        private void set_62_MtFrame_AutomaticBackButtonHandling(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            that.AutomaticBackButtonHandling = (global::System.Boolean)Value;
        }
        private object get_63_MtFrame_Content(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.Content;
        }
        private void set_63_MtFrame_Content(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_64_MtFrame_ContentTransitions(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.ContentTransitions;
        }
        private void set_64_MtFrame_ContentTransitions(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            that.ContentTransitions = (global::Windows.UI.Xaml.Media.Animation.TransitionCollection)Value;
        }
        private object get_65_MtFrame_GoBackCommand(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.GoBackCommand;
        }
        private object get_66_MtFrame_IsFirstPage(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.IsFirstPage;
        }
        private object get_67_MtFrame_PreviousPage(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.PreviousPage;
        }
        private object get_68_MtFrame_CurrentPage(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.CurrentPage;
        }
        private object get_69_MtFrame_NextPage(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.NextPage;
        }
        private object get_70_MtFrame_CanGoBack(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.CanGoBack;
        }
        private object get_71_MtFrame_CanGoForward(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.CanGoForward;
        }
        private object get_72_MtFrame_Pages(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.Pages;
        }
        private object get_73_MtFrame_BackStackDepth(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.BackStackDepth;
        }
        private object get_74_MtFrame_PageAnimation(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.PageAnimation;
        }
        private void set_74_MtFrame_PageAnimation(object instance, object Value)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            that.PageAnimation = (global::MyToolkit.Paging.Animations.IPageAnimation)Value;
        }
        private object get_75_MtFrame_IsNavigating(object instance)
        {
            var that = (global::MyToolkit.Paging.MtFrame)instance;
            return that.IsNavigating;
        }
        private object get_76_AppBarToggleButton_Header(object instance)
        {
            var that = (global::MyToolkit.Controls.AppBarToggleButton)instance;
            return that.Header;
        }
        private void set_76_AppBarToggleButton_Header(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.AppBarToggleButton)instance;
            that.Header = (global::System.String)Value;
        }
        private object get_77_AppBarButton_Header(object instance)
        {
            var that = (global::MyToolkit.Controls.AppBarButton)instance;
            return that.Header;
        }
        private void set_77_AppBarButton_Header(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.AppBarButton)instance;
            that.Header = (global::System.String)Value;
        }
        private object get_78_TextButton_Header(object instance)
        {
            var that = (global::MyToolkit.Controls.TextButton)instance;
            return that.Header;
        }
        private void set_78_TextButton_Header(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.TextButton)instance;
            that.Header = (global::System.String)Value;
        }
        private object get_79_MenuListBox_ItemsSource(object instance)
        {
            var that = (global::MyToolkit.Controls.MenuListBox)instance;
            return that.ItemsSource;
        }
        private void set_79_MenuListBox_ItemsSource(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.MenuListBox)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_80_ColorChooser_SelectedColor(object instance)
        {
            var that = (global::MyToolkit.Controls.ColorChooser)instance;
            return that.SelectedColor;
        }
        private void set_80_ColorChooser_SelectedColor(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.ColorChooser)instance;
            that.SelectedColor = (global::Windows.UI.Color)Value;
        }
        private object get_81_ColorChooser_Colors(object instance)
        {
            var that = (global::MyToolkit.Controls.ColorChooser)instance;
            return that.Colors;
        }
        private void set_81_ColorChooser_Colors(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.ColorChooser)instance;
            that.Colors = (global::Windows.UI.Color[])Value;
        }
        private object get_82_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_82_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_83_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_83_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_84_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_84_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_85_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_85_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_86_PanAndZoomViewer_Content(object instance)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomViewer)instance;
            return that.Content;
        }
        private void set_86_PanAndZoomViewer_Content(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomViewer)instance;
            that.Content = (global::Windows.UI.Xaml.FrameworkElement)Value;
        }
        private object get_87_PanAndZoomViewer_MaxZoomFactor(object instance)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomViewer)instance;
            return that.MaxZoomFactor;
        }
        private void set_87_PanAndZoomViewer_MaxZoomFactor(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomViewer)instance;
            that.MaxZoomFactor = (global::System.Double)Value;
        }
        private object get_88_PanAndZoomImage_Stretch(object instance)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomImage)instance;
            return that.Stretch;
        }
        private void set_88_PanAndZoomImage_Stretch(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomImage)instance;
            that.Stretch = (global::Windows.UI.Xaml.Media.Stretch)Value;
        }
        private object get_89_PanAndZoomImage_Source(object instance)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomImage)instance;
            return that.Source;
        }
        private void set_89_PanAndZoomImage_Source(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomImage)instance;
            that.Source = (global::System.Uri)Value;
        }
        private object get_90_PanAndZoomImage_AutomaticZoomFactor(object instance)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomImage)instance;
            return that.AutomaticZoomFactor;
        }
        private void set_90_PanAndZoomImage_AutomaticZoomFactor(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomImage)instance;
            that.AutomaticZoomFactor = (global::System.Boolean)Value;
        }
        private object get_91_PanAndZoomImage_InnerMargin(object instance)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomImage)instance;
            return that.InnerMargin;
        }
        private void set_91_PanAndZoomImage_InnerMargin(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.PanAndZoomImage)instance;
            that.InnerMargin = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_92_Hamburger_DisplayMode(object instance)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            return that.DisplayMode;
        }
        private void set_92_Hamburger_DisplayMode(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            that.DisplayMode = (global::Windows.UI.Xaml.Controls.SplitViewDisplayMode)Value;
        }
        private object get_93_Hamburger_PaneWidth(object instance)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            return that.PaneWidth;
        }
        private void set_93_Hamburger_PaneWidth(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            that.PaneWidth = (global::System.Double)Value;
        }
        private object get_94_Hamburger_IsPaneOpen(object instance)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            return that.IsPaneOpen;
        }
        private void set_94_Hamburger_IsPaneOpen(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            that.IsPaneOpen = (global::System.Boolean)Value;
        }
        private object get_95_Hamburger_HamburgerBackgroundBrush(object instance)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            return that.HamburgerBackgroundBrush;
        }
        private void set_95_Hamburger_HamburgerBackgroundBrush(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            that.HamburgerBackgroundBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_96_Hamburger_HamburgerForegroundBrush(object instance)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            return that.HamburgerForegroundBrush;
        }
        private void set_96_Hamburger_HamburgerForegroundBrush(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            that.HamburgerForegroundBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_97_Hamburger_Content(object instance)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            return that.Content;
        }
        private void set_97_Hamburger_Content(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_98_Hamburger_ContentMargin(object instance)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            return that.ContentMargin;
        }
        private void set_98_Hamburger_ContentMargin(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            that.ContentMargin = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_99_Hamburger_TopItems(object instance)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            return that.TopItems;
        }
        private void set_99_Hamburger_TopItems(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            that.TopItems = (global::System.Collections.ObjectModel.ObservableCollection<global::MyToolkit.Controls.HamburgerItem>)Value;
        }
        private object get_100_HamburgerItem_Icon(object instance)
        {
            var that = (global::MyToolkit.Controls.HamburgerItem)instance;
            return that.Icon;
        }
        private void set_100_HamburgerItem_Icon(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.HamburgerItem)instance;
            that.Icon = (global::System.Object)Value;
        }
        private object get_101_HamburgerItem_ContentIcon(object instance)
        {
            var that = (global::MyToolkit.Controls.HamburgerItem)instance;
            return that.ContentIcon;
        }
        private void set_101_HamburgerItem_ContentIcon(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.HamburgerItem)instance;
            that.ContentIcon = (global::System.Object)Value;
        }
        private object get_102_HamburgerItem_Content(object instance)
        {
            var that = (global::MyToolkit.Controls.HamburgerItem)instance;
            return that.Content;
        }
        private void set_102_HamburgerItem_Content(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.HamburgerItem)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_103_HamburgerItem_AutoClosePane(object instance)
        {
            var that = (global::MyToolkit.Controls.HamburgerItem)instance;
            return that.AutoClosePane;
        }
        private void set_103_HamburgerItem_AutoClosePane(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.HamburgerItem)instance;
            that.AutoClosePane = (global::System.Boolean)Value;
        }
        private object get_104_HamburgerItem_ShowContentIcon(object instance)
        {
            var that = (global::MyToolkit.Controls.HamburgerItem)instance;
            return that.ShowContentIcon;
        }
        private void set_104_HamburgerItem_ShowContentIcon(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.HamburgerItem)instance;
            that.ShowContentIcon = (global::System.Boolean)Value;
        }
        private object get_105_HamburgerItem_IsEnabled(object instance)
        {
            var that = (global::MyToolkit.Controls.HamburgerItem)instance;
            return that.IsEnabled;
        }
        private void set_105_HamburgerItem_IsEnabled(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.HamburgerItem)instance;
            that.IsEnabled = (global::System.Boolean)Value;
        }
        private object get_106_HamburgerItem_CanBeSelected(object instance)
        {
            var that = (global::MyToolkit.Controls.HamburgerItem)instance;
            return that.CanBeSelected;
        }
        private void set_106_HamburgerItem_CanBeSelected(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.HamburgerItem)instance;
            that.CanBeSelected = (global::System.Boolean)Value;
        }
        private object get_107_Hamburger_BottomItems(object instance)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            return that.BottomItems;
        }
        private void set_107_Hamburger_BottomItems(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            that.BottomItems = (global::System.Collections.ObjectModel.ObservableCollection<global::MyToolkit.Controls.HamburgerItem>)Value;
        }
        private object get_108_Hamburger_SelectedTopItem(object instance)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            return that.SelectedTopItem;
        }
        private object get_109_Hamburger_SelectedBottomItem(object instance)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            return that.SelectedBottomItem;
        }
        private object get_110_Hamburger_Header(object instance)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            return that.Header;
        }
        private void set_110_Hamburger_Header(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_111_Hamburger_HeaderTemplate(object instance)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            return that.HeaderTemplate;
        }
        private void set_111_Hamburger_HeaderTemplate(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_112_Hamburger_IsPaneVisible(object instance)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            return that.IsPaneVisible;
        }
        private void set_112_Hamburger_IsPaneVisible(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            that.IsPaneVisible = (global::System.Boolean)Value;
        }
        private object get_113_Hamburger_SelectedItem(object instance)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            return that.SelectedItem;
        }
        private void set_113_Hamburger_SelectedItem(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.Hamburger)instance;
            that.SelectedItem = (global::MyToolkit.Controls.HamburgerItem)Value;
        }
        private object get_114_DataGridTextColumn_Style(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridTextColumn)instance;
            return that.Style;
        }
        private void set_114_DataGridTextColumn_Style(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridTextColumn)instance;
            that.Style = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_115_DataGridTextColumn_FontSize(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridTextColumn)instance;
            return that.FontSize;
        }
        private void set_115_DataGridTextColumn_FontSize(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridTextColumn)instance;
            that.FontSize = (global::System.Double)Value;
        }
        private object get_116_DataGridTextColumn_FontStyle(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridTextColumn)instance;
            return that.FontStyle;
        }
        private void set_116_DataGridTextColumn_FontStyle(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridTextColumn)instance;
            that.FontStyle = (global::Windows.UI.Text.FontStyle)Value;
        }
        private object get_117_DataGridTextColumn_Foreground(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridTextColumn)instance;
            return that.Foreground;
        }
        private void set_117_DataGridTextColumn_Foreground(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridTextColumn)instance;
            that.Foreground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_118_DataGridBoundColumn_Binding(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridBoundColumn)instance;
            return that.Binding;
        }
        private void set_118_DataGridBoundColumn_Binding(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridBoundColumn)instance;
            that.Binding = (global::Windows.UI.Xaml.Data.Binding)Value;
        }
        private object get_119_DataGridBoundColumn_OrderPropertyPath(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridBoundColumn)instance;
            return that.OrderPropertyPath;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember xamlMember = null;
            global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "MyToolkit.Controls.LongListSelector.ItemTemplate":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.LongListSelector");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_LongListSelector_ItemTemplate;
                xamlMember.Setter = set_0_LongListSelector_ItemTemplate;
                break;
            case "MyToolkit.Controls.LongListSelector.ItemsSource":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.LongListSelector");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_LongListSelector_ItemsSource;
                xamlMember.Setter = set_1_LongListSelector_ItemsSource;
                break;
            case "MyToolkit.Controls.LongListSelector.UseNavigationEvent":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.LongListSelector");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "UseNavigationEvent", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_LongListSelector_UseNavigationEvent;
                xamlMember.Setter = set_2_LongListSelector_UseNavigationEvent;
                break;
            case "MyToolkit.Controls.WatermarkedTextBox.WatermarkBrush":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.WatermarkedTextBox");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "WatermarkBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.Getter = get_3_WatermarkedTextBox_WatermarkBrush;
                xamlMember.Setter = set_3_WatermarkedTextBox_WatermarkBrush;
                break;
            case "MyToolkit.Controls.WatermarkedTextBox.Watermark":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.WatermarkedTextBox");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Watermark", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_WatermarkedTextBox_Watermark;
                xamlMember.Setter = set_4_WatermarkedTextBox_Watermark;
                break;
            case "MyToolkit.Controls.WatermarkedTextBox.Text":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.WatermarkedTextBox");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_WatermarkedTextBox_Text;
                xamlMember.Setter = set_5_WatermarkedTextBox_Text;
                break;
            case "MyToolkit.Controls.ScrollableItemsControl.ScrollViewer":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ScrollableItemsControl");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "ScrollViewer", "Windows.UI.Xaml.Controls.ScrollViewer");
                xamlMember.Getter = get_6_ScrollableItemsControl_ScrollViewer;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.ScrollableItemsControl.TriggerScrolledToEndEvents":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ScrollableItemsControl");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "TriggerScrolledToEndEvents", "Boolean");
                xamlMember.Getter = get_7_ScrollableItemsControl_TriggerScrolledToEndEvents;
                xamlMember.Setter = set_7_ScrollableItemsControl_TriggerScrolledToEndEvents;
                break;
            case "MyToolkit.Controls.ScrollableItemsControl.InnerMargin":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ScrollableItemsControl");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "InnerMargin", "Windows.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_ScrollableItemsControl_InnerMargin;
                xamlMember.Setter = set_8_ScrollableItemsControl_InnerMargin;
                break;
            case "MyToolkit.Controls.ScrollableItemsControl.IsScrolling":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ScrollableItemsControl");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "IsScrolling", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_ScrollableItemsControl_IsScrolling;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.DataGrid.HeaderBackground":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "HeaderBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_DataGrid_HeaderBackground;
                xamlMember.Setter = set_10_DataGrid_HeaderBackground;
                break;
            case "MyToolkit.Controls.DataGrid.RowBackgroundOddBrush":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "RowBackgroundOddBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_DataGrid_RowBackgroundOddBrush;
                xamlMember.Setter = set_11_DataGrid_RowBackgroundOddBrush;
                break;
            case "MyToolkit.Controls.DataGrid.CellTemplate":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "CellTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_DataGrid_CellTemplate;
                xamlMember.Setter = set_12_DataGrid_CellTemplate;
                break;
            case "MyToolkit.Controls.DataGrid.HeaderTemplate":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_DataGrid_HeaderTemplate;
                xamlMember.Setter = set_13_DataGrid_HeaderTemplate;
                break;
            case "MyToolkit.Controls.DataGrid.SelectedItems":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "SelectedItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.Getter = get_14_DataGrid_SelectedItems;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.DataGrid.Items":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Items", "MyToolkit.Collections.IObservableCollectionView");
                xamlMember.Getter = get_15_DataGrid_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.DataGrid.SelectedColumn":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "SelectedColumn", "MyToolkit.Controls.DataGridColumnBase");
                xamlMember.Getter = get_16_DataGrid_SelectedColumn;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.DataGrid.SelectionMode":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "SelectionMode", "Windows.UI.Xaml.Controls.SelectionMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_DataGrid_SelectionMode;
                xamlMember.Setter = set_17_DataGrid_SelectionMode;
                break;
            case "MyToolkit.Controls.DataGrid.SelectedItem":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_DataGrid_SelectedItem;
                xamlMember.Setter = set_18_DataGrid_SelectedItem;
                break;
            case "MyToolkit.Controls.DataGrid.ItemsSource":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_DataGrid_ItemsSource;
                xamlMember.Setter = set_19_DataGrid_ItemsSource;
                break;
            case "MyToolkit.Controls.DataGrid.DefaultOrderIndex":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "DefaultOrderIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_DataGrid_DefaultOrderIndex;
                xamlMember.Setter = set_20_DataGrid_DefaultOrderIndex;
                break;
            case "MyToolkit.Controls.DataGrid.RowStyle":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "RowStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_DataGrid_RowStyle;
                xamlMember.Setter = set_21_DataGrid_RowStyle;
                break;
            case "MyToolkit.Controls.DataGrid.ItemDetailsTemplate":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "ItemDetailsTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_DataGrid_ItemDetailsTemplate;
                xamlMember.Setter = set_22_DataGrid_ItemDetailsTemplate;
                break;
            case "MyToolkit.Controls.DataGrid.Columns":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Columns", "MyToolkit.Controls.DataGridColumnCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_DataGrid_Columns;
                xamlMember.Setter = set_23_DataGrid_Columns;
                break;
            case "MyToolkit.Controls.DataGridColumnBase.CanSort":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridColumnBase");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "CanSort", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_DataGridColumnBase_CanSort;
                xamlMember.Setter = set_24_DataGridColumnBase_CanSort;
                break;
            case "MyToolkit.Controls.DataGridColumnBase.IsSelected":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridColumnBase");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_DataGridColumnBase_IsSelected;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.DataGridColumnBase.IsAscending":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridColumnBase");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "IsAscending", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_DataGridColumnBase_IsAscending;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.DataGridColumnBase.IsAscendingDefault":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridColumnBase");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "IsAscendingDefault", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_DataGridColumnBase_IsAscendingDefault;
                xamlMember.Setter = set_27_DataGridColumnBase_IsAscendingDefault;
                break;
            case "MyToolkit.Controls.DataGridColumnBase.Header":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridColumnBase");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_DataGridColumnBase_Header;
                xamlMember.Setter = set_28_DataGridColumnBase_Header;
                break;
            case "MyToolkit.Controls.DataGridColumnBase.Width":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridColumnBase");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Width", "Windows.UI.Xaml.GridLength");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_DataGridColumnBase_Width;
                xamlMember.Setter = set_29_DataGridColumnBase_Width;
                break;
            case "MyToolkit.Controls.DataGridColumnBase.OrderPropertyPath":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridColumnBase");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "OrderPropertyPath", "Windows.UI.Xaml.PropertyPath");
                xamlMember.Getter = get_30_DataGridColumnBase_OrderPropertyPath;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.DataGrid.RowBackgroundEvenBrush":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "RowBackgroundEvenBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_DataGrid_RowBackgroundEvenBrush;
                xamlMember.Setter = set_31_DataGrid_RowBackgroundEvenBrush;
                break;
            case "MyToolkit.Controls.ImageButton.State":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ImageButton");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "State", "MyToolkit.Controls.ImageButtonState");
                xamlMember.Getter = get_32_ImageButton_State;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.ImageButton.Command":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ImageButton");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_ImageButton_Command;
                xamlMember.Setter = set_33_ImageButton_Command;
                break;
            case "MyToolkit.Controls.ImageButton.CommandParameter":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ImageButton");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_ImageButton_CommandParameter;
                xamlMember.Setter = set_34_ImageButton_CommandParameter;
                break;
            case "MyToolkit.Controls.ImageButton.Content":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ImageButton");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Content", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_ImageButton_Content;
                xamlMember.Setter = set_35_ImageButton_Content;
                break;
            case "MyToolkit.Controls.ImageButton.PressedContent":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ImageButton");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "PressedContent", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_ImageButton_PressedContent;
                xamlMember.Setter = set_36_ImageButton_PressedContent;
                break;
            case "MyToolkit.Controls.ImageButton.OverContent":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ImageButton");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "OverContent", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_ImageButton_OverContent;
                xamlMember.Setter = set_37_ImageButton_OverContent;
                break;
            case "MyToolkit.Controls.ImageButton.Header":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ImageButton");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Header", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_ImageButton_Header;
                xamlMember.Setter = set_38_ImageButton_Header;
                break;
            case "MyToolkit.Controls.MtListBox.ScrollViewer":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.MtListBox");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "ScrollViewer", "Windows.UI.Xaml.Controls.ScrollViewer");
                xamlMember.Getter = get_39_MtListBox_ScrollViewer;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.MtListBox.TriggerScrolledToEndEvents":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.MtListBox");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "TriggerScrolledToEndEvents", "Boolean");
                xamlMember.Getter = get_40_MtListBox_TriggerScrolledToEndEvents;
                xamlMember.Setter = set_40_MtListBox_TriggerScrolledToEndEvents;
                break;
            case "MyToolkit.Controls.MtListBox.InnerMargin":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.MtListBox");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "InnerMargin", "Windows.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_MtListBox_InnerMargin;
                xamlMember.Setter = set_41_MtListBox_InnerMargin;
                break;
            case "MyToolkit.Controls.MtListBox.IsScrolling":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.MtListBox");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "IsScrolling", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_MtListBox_IsScrolling;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.MtPivot.Items":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.MtPivot");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Items", "System.Collections.ObjectModel.ObservableCollection`1<MyToolkit.Controls.MtPivotItem>");
                xamlMember.Getter = get_43_MtPivot_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.MtPivotItem.Content":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.MtPivotItem");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Content", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_MtPivotItem_Content;
                xamlMember.Setter = set_44_MtPivotItem_Content;
                break;
            case "MyToolkit.Controls.MtPivotItem.Header":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.MtPivotItem");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Header", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_MtPivotItem_Header;
                xamlMember.Setter = set_45_MtPivotItem_Header;
                break;
            case "MyToolkit.Controls.MtPivotItem.Preload":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.MtPivotItem");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Preload", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_MtPivotItem_Preload;
                xamlMember.Setter = set_46_MtPivotItem_Preload;
                break;
            case "MyToolkit.Controls.MtPivot.SelectedBrush":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.MtPivot");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "SelectedBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_MtPivot_SelectedBrush;
                xamlMember.Setter = set_47_MtPivot_SelectedBrush;
                break;
            case "MyToolkit.Controls.MtPivot.UnselectedBrush":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.MtPivot");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "UnselectedBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_MtPivot_UnselectedBrush;
                xamlMember.Setter = set_48_MtPivot_UnselectedBrush;
                break;
            case "MyToolkit.Controls.MtPivot.HeaderTemplate":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.MtPivot");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_MtPivot_HeaderTemplate;
                xamlMember.Setter = set_49_MtPivot_HeaderTemplate;
                break;
            case "MyToolkit.Controls.MtPivot.IsHeaderEnabled":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.MtPivot");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "IsHeaderEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_MtPivot_IsHeaderEnabled;
                xamlMember.Setter = set_50_MtPivot_IsHeaderEnabled;
                break;
            case "MyToolkit.Controls.MtPivot.SelectedItem":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.MtPivot");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_MtPivot_SelectedItem;
                xamlMember.Setter = set_51_MtPivot_SelectedItem;
                break;
            case "MyToolkit.Controls.MtPivot.SelectedIndex":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.MtPivot");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "SelectedIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_MtPivot_SelectedIndex;
                xamlMember.Setter = set_52_MtPivot_SelectedIndex;
                break;
            case "MyToolkit.Controls.FadingImage.Stretch":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.FadingImage");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Stretch", "Windows.UI.Xaml.Media.Stretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_FadingImage_Stretch;
                xamlMember.Setter = set_53_FadingImage_Stretch;
                break;
            case "MyToolkit.Controls.FadingImage.FadingOpacity":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.FadingImage");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "FadingOpacity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_FadingImage_FadingOpacity;
                xamlMember.Setter = set_54_FadingImage_FadingOpacity;
                break;
            case "MyToolkit.Controls.FadingImage.FadingDuration":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.FadingImage");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "FadingDuration", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_FadingImage_FadingDuration;
                xamlMember.Setter = set_55_FadingImage_FadingDuration;
                break;
            case "MyToolkit.Controls.FadingImage.WaitForNextImage":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.FadingImage");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "WaitForNextImage", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_FadingImage_WaitForNextImage;
                xamlMember.Setter = set_56_FadingImage_WaitForNextImage;
                break;
            case "MyToolkit.Controls.FadingImage.Source":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.FadingImage");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Source", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_FadingImage_Source;
                xamlMember.Setter = set_57_FadingImage_Source;
                break;
            case "MyToolkit.Paging.MtFrame.ShowNavigationOnAppInAndOut":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "ShowNavigationOnAppInAndOut", "Boolean");
                xamlMember.Getter = get_58_MtFrame_ShowNavigationOnAppInAndOut;
                xamlMember.Setter = set_58_MtFrame_ShowNavigationOnAppInAndOut;
                break;
            case "MyToolkit.Paging.MtFrame.DisableForwardStack":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "DisableForwardStack", "Boolean");
                xamlMember.Getter = get_59_MtFrame_DisableForwardStack;
                xamlMember.Setter = set_59_MtFrame_DisableForwardStack;
                break;
            case "MyToolkit.Paging.MtFrame.DisableCache":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "DisableCache", "Boolean");
                xamlMember.Getter = get_60_MtFrame_DisableCache;
                xamlMember.Setter = set_60_MtFrame_DisableCache;
                break;
            case "MyToolkit.Paging.MtFrame.InternalFrame":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "InternalFrame", "Windows.UI.Xaml.Controls.Frame");
                xamlMember.Getter = get_61_MtFrame_InternalFrame;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtFrame.AutomaticBackButtonHandling":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "AutomaticBackButtonHandling", "Boolean");
                xamlMember.Getter = get_62_MtFrame_AutomaticBackButtonHandling;
                xamlMember.Setter = set_62_MtFrame_AutomaticBackButtonHandling;
                break;
            case "MyToolkit.Paging.MtFrame.Content":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_MtFrame_Content;
                xamlMember.Setter = set_63_MtFrame_Content;
                break;
            case "MyToolkit.Paging.MtFrame.ContentTransitions":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "ContentTransitions", "Windows.UI.Xaml.Media.Animation.TransitionCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_MtFrame_ContentTransitions;
                xamlMember.Setter = set_64_MtFrame_ContentTransitions;
                break;
            case "MyToolkit.Paging.MtFrame.GoBackCommand":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "GoBackCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_65_MtFrame_GoBackCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtFrame.IsFirstPage":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "IsFirstPage", "Boolean");
                xamlMember.Getter = get_66_MtFrame_IsFirstPage;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtFrame.PreviousPage":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "PreviousPage", "MyToolkit.Paging.MtPageDescription");
                xamlMember.Getter = get_67_MtFrame_PreviousPage;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtFrame.CurrentPage":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "CurrentPage", "MyToolkit.Paging.MtPageDescription");
                xamlMember.Getter = get_68_MtFrame_CurrentPage;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtFrame.NextPage":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "NextPage", "MyToolkit.Paging.MtPageDescription");
                xamlMember.Getter = get_69_MtFrame_NextPage;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtFrame.CanGoBack":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "CanGoBack", "Boolean");
                xamlMember.Getter = get_70_MtFrame_CanGoBack;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtFrame.CanGoForward":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "CanGoForward", "Boolean");
                xamlMember.Getter = get_71_MtFrame_CanGoForward;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtFrame.Pages":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Pages", "System.Collections.Generic.IReadOnlyList`1<MyToolkit.Paging.MtPageDescription>");
                xamlMember.Getter = get_72_MtFrame_Pages;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtFrame.BackStackDepth":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "BackStackDepth", "Int32");
                xamlMember.Getter = get_73_MtFrame_BackStackDepth;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Paging.MtFrame.PageAnimation":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "PageAnimation", "MyToolkit.Paging.Animations.IPageAnimation");
                xamlMember.Getter = get_74_MtFrame_PageAnimation;
                xamlMember.Setter = set_74_MtFrame_PageAnimation;
                break;
            case "MyToolkit.Paging.MtFrame.IsNavigating":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Paging.MtFrame");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "IsNavigating", "Boolean");
                xamlMember.Getter = get_75_MtFrame_IsNavigating;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.AppBarToggleButton.Header":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.AppBarToggleButton");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Header", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_76_AppBarToggleButton_Header;
                xamlMember.Setter = set_76_AppBarToggleButton_Header;
                break;
            case "MyToolkit.Controls.AppBarButton.Header":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.AppBarButton");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Header", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_77_AppBarButton_Header;
                xamlMember.Setter = set_77_AppBarButton_Header;
                break;
            case "MyToolkit.Controls.TextButton.Header":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.TextButton");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Header", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_TextButton_Header;
                xamlMember.Setter = set_78_TextButton_Header;
                break;
            case "MyToolkit.Controls.MenuListBox.ItemsSource":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.MenuListBox");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_79_MenuListBox_ItemsSource;
                xamlMember.Setter = set_79_MenuListBox_ItemsSource;
                break;
            case "MyToolkit.Controls.ColorChooser.SelectedColor":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ColorChooser");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "SelectedColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_ColorChooser_SelectedColor;
                xamlMember.Setter = set_80_ColorChooser_SelectedColor;
                break;
            case "MyToolkit.Controls.ColorChooser.Colors":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.ColorChooser");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Colors", "Windows.UI.Color[]");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_ColorChooser_Colors;
                xamlMember.Setter = set_81_ColorChooser_Colors;
                break;
            case "Windows.UI.Color.A":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_82_Color_A;
                xamlMember.Setter = set_82_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_83_Color_B;
                xamlMember.Setter = set_83_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_84_Color_G;
                xamlMember.Setter = set_84_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_85_Color_R;
                xamlMember.Setter = set_85_Color_R;
                break;
            case "MyToolkit.Controls.PanAndZoomViewer.Content":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.PanAndZoomViewer");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Content", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_PanAndZoomViewer_Content;
                xamlMember.Setter = set_86_PanAndZoomViewer_Content;
                break;
            case "MyToolkit.Controls.PanAndZoomViewer.MaxZoomFactor":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.PanAndZoomViewer");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "MaxZoomFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_PanAndZoomViewer_MaxZoomFactor;
                xamlMember.Setter = set_87_PanAndZoomViewer_MaxZoomFactor;
                break;
            case "MyToolkit.Controls.PanAndZoomImage.Stretch":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.PanAndZoomImage");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Stretch", "Windows.UI.Xaml.Media.Stretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_88_PanAndZoomImage_Stretch;
                xamlMember.Setter = set_88_PanAndZoomImage_Stretch;
                break;
            case "MyToolkit.Controls.PanAndZoomImage.Source":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.PanAndZoomImage");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Source", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_PanAndZoomImage_Source;
                xamlMember.Setter = set_89_PanAndZoomImage_Source;
                break;
            case "MyToolkit.Controls.PanAndZoomImage.AutomaticZoomFactor":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.PanAndZoomImage");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "AutomaticZoomFactor", "Boolean");
                xamlMember.Getter = get_90_PanAndZoomImage_AutomaticZoomFactor;
                xamlMember.Setter = set_90_PanAndZoomImage_AutomaticZoomFactor;
                break;
            case "MyToolkit.Controls.PanAndZoomImage.InnerMargin":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.PanAndZoomImage");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "InnerMargin", "Windows.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_91_PanAndZoomImage_InnerMargin;
                xamlMember.Setter = set_91_PanAndZoomImage_InnerMargin;
                break;
            case "MyToolkit.Controls.Hamburger.DisplayMode":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.Hamburger");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "DisplayMode", "Windows.UI.Xaml.Controls.SplitViewDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_92_Hamburger_DisplayMode;
                xamlMember.Setter = set_92_Hamburger_DisplayMode;
                break;
            case "MyToolkit.Controls.Hamburger.PaneWidth":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.Hamburger");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "PaneWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_93_Hamburger_PaneWidth;
                xamlMember.Setter = set_93_Hamburger_PaneWidth;
                break;
            case "MyToolkit.Controls.Hamburger.IsPaneOpen":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.Hamburger");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "IsPaneOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_94_Hamburger_IsPaneOpen;
                xamlMember.Setter = set_94_Hamburger_IsPaneOpen;
                break;
            case "MyToolkit.Controls.Hamburger.HamburgerBackgroundBrush":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.Hamburger");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "HamburgerBackgroundBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_95_Hamburger_HamburgerBackgroundBrush;
                xamlMember.Setter = set_95_Hamburger_HamburgerBackgroundBrush;
                break;
            case "MyToolkit.Controls.Hamburger.HamburgerForegroundBrush":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.Hamburger");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "HamburgerForegroundBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_96_Hamburger_HamburgerForegroundBrush;
                xamlMember.Setter = set_96_Hamburger_HamburgerForegroundBrush;
                break;
            case "MyToolkit.Controls.Hamburger.Content":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.Hamburger");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_97_Hamburger_Content;
                xamlMember.Setter = set_97_Hamburger_Content;
                break;
            case "MyToolkit.Controls.Hamburger.ContentMargin":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.Hamburger");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "ContentMargin", "Windows.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_98_Hamburger_ContentMargin;
                xamlMember.Setter = set_98_Hamburger_ContentMargin;
                break;
            case "MyToolkit.Controls.Hamburger.TopItems":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.Hamburger");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "TopItems", "System.Collections.ObjectModel.ObservableCollection`1<MyToolkit.Controls.HamburgerItem>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_99_Hamburger_TopItems;
                xamlMember.Setter = set_99_Hamburger_TopItems;
                break;
            case "MyToolkit.Controls.HamburgerItem.Icon":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.HamburgerItem");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Icon", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_100_HamburgerItem_Icon;
                xamlMember.Setter = set_100_HamburgerItem_Icon;
                break;
            case "MyToolkit.Controls.HamburgerItem.ContentIcon":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.HamburgerItem");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "ContentIcon", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_101_HamburgerItem_ContentIcon;
                xamlMember.Setter = set_101_HamburgerItem_ContentIcon;
                break;
            case "MyToolkit.Controls.HamburgerItem.Content":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.HamburgerItem");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_102_HamburgerItem_Content;
                xamlMember.Setter = set_102_HamburgerItem_Content;
                break;
            case "MyToolkit.Controls.HamburgerItem.AutoClosePane":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.HamburgerItem");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "AutoClosePane", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_103_HamburgerItem_AutoClosePane;
                xamlMember.Setter = set_103_HamburgerItem_AutoClosePane;
                break;
            case "MyToolkit.Controls.HamburgerItem.ShowContentIcon":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.HamburgerItem");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "ShowContentIcon", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_104_HamburgerItem_ShowContentIcon;
                xamlMember.Setter = set_104_HamburgerItem_ShowContentIcon;
                break;
            case "MyToolkit.Controls.HamburgerItem.IsEnabled":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.HamburgerItem");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "IsEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_105_HamburgerItem_IsEnabled;
                xamlMember.Setter = set_105_HamburgerItem_IsEnabled;
                break;
            case "MyToolkit.Controls.HamburgerItem.CanBeSelected":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.HamburgerItem");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "CanBeSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_106_HamburgerItem_CanBeSelected;
                xamlMember.Setter = set_106_HamburgerItem_CanBeSelected;
                break;
            case "MyToolkit.Controls.Hamburger.BottomItems":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.Hamburger");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "BottomItems", "System.Collections.ObjectModel.ObservableCollection`1<MyToolkit.Controls.HamburgerItem>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_107_Hamburger_BottomItems;
                xamlMember.Setter = set_107_Hamburger_BottomItems;
                break;
            case "MyToolkit.Controls.Hamburger.SelectedTopItem":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.Hamburger");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "SelectedTopItem", "MyToolkit.Controls.HamburgerItem");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_108_Hamburger_SelectedTopItem;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.Hamburger.SelectedBottomItem":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.Hamburger");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "SelectedBottomItem", "MyToolkit.Controls.HamburgerItem");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_109_Hamburger_SelectedBottomItem;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.Hamburger.Header":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.Hamburger");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_110_Hamburger_Header;
                xamlMember.Setter = set_110_Hamburger_Header;
                break;
            case "MyToolkit.Controls.Hamburger.HeaderTemplate":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.Hamburger");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_111_Hamburger_HeaderTemplate;
                xamlMember.Setter = set_111_Hamburger_HeaderTemplate;
                break;
            case "MyToolkit.Controls.Hamburger.IsPaneVisible":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.Hamburger");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "IsPaneVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_112_Hamburger_IsPaneVisible;
                xamlMember.Setter = set_112_Hamburger_IsPaneVisible;
                break;
            case "MyToolkit.Controls.Hamburger.SelectedItem":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.Hamburger");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "SelectedItem", "MyToolkit.Controls.HamburgerItem");
                xamlMember.Getter = get_113_Hamburger_SelectedItem;
                xamlMember.Setter = set_113_Hamburger_SelectedItem;
                break;
            case "MyToolkit.Controls.DataGridTextColumn.Style":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridTextColumn");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Style", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_114_DataGridTextColumn_Style;
                xamlMember.Setter = set_114_DataGridTextColumn_Style;
                break;
            case "MyToolkit.Controls.DataGridTextColumn.FontSize":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridTextColumn");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "FontSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_115_DataGridTextColumn_FontSize;
                xamlMember.Setter = set_115_DataGridTextColumn_FontSize;
                break;
            case "MyToolkit.Controls.DataGridTextColumn.FontStyle":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridTextColumn");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "FontStyle", "Windows.UI.Text.FontStyle");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_116_DataGridTextColumn_FontStyle;
                xamlMember.Setter = set_116_DataGridTextColumn_FontStyle;
                break;
            case "MyToolkit.Controls.DataGridTextColumn.Foreground":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridTextColumn");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Foreground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_117_DataGridTextColumn_Foreground;
                xamlMember.Setter = set_117_DataGridTextColumn_Foreground;
                break;
            case "MyToolkit.Controls.DataGridBoundColumn.Binding":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridBoundColumn");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "Binding", "Windows.UI.Xaml.Data.Binding");
                xamlMember.Getter = get_118_DataGridBoundColumn_Binding;
                xamlMember.Setter = set_118_DataGridBoundColumn_Binding;
                break;
            case "MyToolkit.Controls.DataGridBoundColumn.OrderPropertyPath":
                userType = (global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridBoundColumn");
                xamlMember = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMember(this, "OrderPropertyPath", "Windows.UI.Xaml.PropertyPath");
                xamlMember.Getter = get_119_DataGridBoundColumn_OrderPropertyPath;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlSystemBaseType
    {
        global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

